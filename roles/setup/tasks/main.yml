%YAML 1.1
---

- name: determine if this is first run
  stat:
    path: "{{ inventory_dir }}/.setup-complete"
    follow: yes
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: setup_stat
  delegate_to: 127.0.0.1
  tags:
    - setup-check

- name: run setup
  import_tasks: first_run.yml
  when:
    - setup_stat.stat.exists is defined
    - not setup_stat.stat.exists
  tags:
    - initial

- name: create data_dir
  become: yes
  file:
    path: /var/lib/validator
    state: directory
    owner: "{{ user['name'] }}"
    group: "{{ user['name'] }}"

- name: data source path
  command: "{{ user['home'] }}/venv/bin/python -c 'import pkg_resources as pr; print (pr.resource_filename(\"validator\", \"ml/data\"))'"
  register: source_data_path

- name: data source files
  find:
    paths: "{{ source_data_path.stdout }}"
    pattern: "df_(innovation|questions|domain).csv"
    use_regex: yes
  register: source_data_files

- name: target data files
  find:
    paths: /var/lib/validator
  register: data_files
  
- name: copy data files, if needed
  become: yes
  become_user: "{{ user['name'] }}"
  copy:
    remote_src: yes
    src: "{{ item.path }}"
    dest: /var/lib/validator
    owner: "{{ user['name'] }}"
    group: "{{ user['name'] }}"
  with_items: "{{ source_data_files.files }}"
  when:
    - source_data_files.matched > 0
    - data_files.matched == 0

- name: copy over requirements.txt
  become: yes
  copy:
    src: "{{ inventory_dir }}/files/requirements.txt"
    dest: "{{ app_dir }}/requirements.txt"
    owner: "{{ user['name'] }}"
    group: "{{ user['name'] }}"

- name: install validator using pip
  become: yes
  become_user: "{{ user['name'] }}"
  pip:
    virtualenv: "{{ user['home'] }}/venv" 
    requirements: "{{ app_dir }}/requirements.txt"
    state: latest
  tags:
    - validator-update
  notify: restart gunicorn
